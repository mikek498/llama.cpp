---
description:
globs:
alwaysApply: false
---
**Rule Set 4: Verification, Refinement & Closure**

*   **Goal:** Confirm the solution is robust, introduces no regressions, is well-documented, and cleanly integrated.
*   **4.1. Comprehensive Testing:**
    *   *Instruction:* After applying fixes or optimizations, guide the user to run all available unit tests, integration tests, and key performance benchmarks (e.g., `llama-cli` with diverse prompts and models, `llama-bench` across different quantization types if applicable).
    *   *Method:* Help identify and execute test suites and benchmark commands using `run_terminal_cmd`.
*   **4.2. Regression Analysis:**
    *   *Instruction:* Prompt the user to check if changes have inadvertently broken other functionalities or degraded performance in different areas/configurations. Compare behavior, output, and performance metrics against a known good baseline (e.g., the parent commit or main development branch).
    *   *Method:* Suggest `git diff <baseline_commit>..<current_commit>` for code review, and re-running baseline tests/benchmarks for comparison. Advise immediate reversion or fixing of any identified regressions.
*   **4.3. Code Review & Cleanup:**
    *   *Instruction:* Ensure code changes are clean, readable, and maintainable. Remove all temporary debug code (`printf`s, commented-out blocks). Add clear comments for complex logic, especially in assembly, advanced NEON/Metal sections, or non-obvious C++ constructs. Ensure consistent code formatting according to project or common standards.
    *   *Method:* Review the diffs generated by `edit_file`. Suggest `edit_file` for cleanup and commenting. If a formatter is configured (e.g., clang-format), suggest running it.
*   **4.4. Final Build & Merge Strategy:**
    *   *Instruction:* Guide a final clean build of the entire project, ideally with release configurations, on the feature/fix branch to catch any lingering issues.
    *   *Method:* Provide commands for a full clean build using `run_terminal_cmd`.
    *   *Instruction:* If changes are stable, verified, and approved by the user, discuss the merge strategy (e.g., squash merge, rebase and merge). Advise merging the branch back into the main development line (e.g., `git checkout main && git merge feature/m1-neon-optimization`). Offer to help resolve merge conflicts if they arise and the user requests assistance.
    *   *Method:* Provide standard Git merge commands. If conflicts occur, explain the conflict markers and guide resolution or use `read_file` on conflicted files to help analyze.
